What happens when you initialize a repository? Why do you need to do it?
Initializing a repository allows a directory to turn into a git repository. From here you can commit and handle the entire version control steps like any other git repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?
I think it allows for an area to first try out what a commit would look like and confirm that you are actually comfortable with it. It is a test in a certain way.

I am adding a second commit here for practice.  I will add a statement in the commit message that details this.

How can you use the staging area to make sure you have one commit per logical change?
You can use git diff --staged

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When you have new features that you want to explore, or there is a new version of the SW you want to try out that may or may not become part of the main branch.

You may consider branching when you have different regions or languages that you are trying to support.

How do the diagrams help you visualize the branch structure?
The diagrams show the number of branches and their relation to commits. They show reachability and also any merges.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
When branches merge the inheirit commits of each branch

Reflect: Automatic vs. Manual Merging

Now that you’ve learned when Git will not be able to automatically merge branches, and what happens when it can’t, go add the following question and your thoughts on it to your reflections file:

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
Git auto is easy and can help with finding conflicts. Manual can be safer but slower, not as scalable with multiple people.

here is the end of the file